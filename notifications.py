import logging
from datetime import datetime, timedelta, date

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot

from utils import parse_russian_datetime
from services.storage import get_all_appointments, get_appointments_by_range
from config import ADMIN_IDS

logger = logging.getLogger(__name__)
scheduler = AsyncIOScheduler()

async def schedule_all_notifications(bot: Bot):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç:
      ‚Äì –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –∞–¥–º–∏–Ω–∞–º –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ —Å–µ–∞–Ω—Å–∞
      ‚Äì –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    """
    # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    scheduler.remove_all_jobs()

    now = datetime.now()
    recs = await get_all_appointments()

    for r in recs:
        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
        if r["status"] == "–æ—Ç–º–µ–Ω–µ–Ω–∞" or r.get("payment_status") != "–æ–ø–ª–∞—á–µ–Ω–æ":
            continue

        # –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É+–≤—Ä–µ–º—è
        dt = parse_russian_datetime(f"{r['date']} {r['time']}")

        # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –≤ 09:00
        day_before = (dt - timedelta(days=1)).replace(hour=9, minute=0, second=0)
        if day_before > now:
            scheduler.add_job(
                send_reminder,
                trigger=DateTrigger(run_date=day_before),
                args=[bot, r["user_id"], dt, "–∑–∞ –¥–µ–Ω—å"],
                id=f"reminder_day_{r['id']}",
                replace_existing=True,
            )
            for admin_id in ADMIN_IDS:
                scheduler.add_job(
                    send_admin_notification,
                    trigger=DateTrigger(run_date=day_before),
                    args=[bot, admin_id, r, dt, "–∑–∞ –¥–µ–Ω—å"],
                    id=f"admin_day_{r['id']}_{admin_id}",
                    replace_existing=True,
                )

        # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ
        hour_before = dt - timedelta(hours=1)
        if hour_before > now:
            scheduler.add_job(
                send_reminder,
                trigger=DateTrigger(run_date=hour_before),
                args=[bot, r["user_id"], dt, "–∑–∞ —á–∞—Å"],
                id=f"reminder_hour_{r['id']}",
                replace_existing=True,
            )
            for admin_id in ADMIN_IDS:
                scheduler.add_job(
                    send_admin_notification,
                    trigger=DateTrigger(run_date=hour_before),
                    args=[bot, admin_id, r, dt, "–∑–∞ —á–∞—Å"],
                    id=f"admin_hour_{r['id']}_{admin_id}",
                    replace_existing=True,
                )

    # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00
    scheduler.add_job(
        send_daily_summary,
        trigger=CronTrigger(hour=18, minute=0),
        args=[bot],
        id="daily_summary",
        replace_existing=True,
    )

    # –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if not scheduler.running:
        scheduler.start()

async def send_reminder(bot: Bot, user_id: int, dt: datetime, when: str):
    text = f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–∞ –∑–∞–ø–∏—Å—å {dt.strftime('%d %B %Y –≤ %H:%M')} ‚Äî {when}!"
    try:
        await bot.send_message(user_id, text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({when}) user_id={user_id}: {e}")

async def send_admin_notification(bot: Bot, admin_id: int, appointment: dict, dt: datetime, when: str):
    text = (
        f"‚öôÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É ({when}):\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å u{appointment['user_id']} ‚Äî {appointment['service']}\n"
        f"–î–∞—Ç–∞: {dt.strftime('%d %B %Y –≤ %H:%M')}"
    )
    try:
        await bot.send_message(admin_id, text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É={admin_id}: {e}")

async def send_daily_summary(bot: Bot):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
    """
    tomorrow = date.today() + timedelta(days=1)
    start = tomorrow.strftime('%d %B')
    end = start  # —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –¥–∞—Ç–∞
    recs = await get_appointments_by_range(start, end)

    if not recs:
        text = f"üìã –†–∞—Å—Å—ã–ª–∫–∞: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ {start}."
    else:
        lines = [f"{r['time']} ‚Äî {r['service']} (u{r['user_id']})" for r in recs]
        text = "üìã –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (" + start + "):\n" + "\n".join(lines)

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω—É={admin_id}: {e}")
