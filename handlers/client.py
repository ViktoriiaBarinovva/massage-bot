# handlers/client.py

from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta

from config import ADMIN_IDS
from utils import parse_russian_datetime, send_with_main_menu
from services.storage import (
    get_user_appointments,
    cancel_appointment,
    update_appointment,
    is_slot_taken,
    save_appointment,
)
from keyboards.client_kb import client_menu, admin_menu

router = Router()

class BookingStates(StatesGroup):
    choosing_service = State()
    choosing_datetime = State()

class CancelStates(StatesGroup):
    choosing = State()

class RescheduleStates(StatesGroup):
    choosing = State()
    new_time = State()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –≤–æ–∑–≤—Ä–∞—Ç ¬´–ù–∞–∑–∞–¥¬ª
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    await state.clear()
    if is_admin(message.from_user.id):
        await message.answer("–û—Ç–º–µ–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_menu())
    else:
        await message.answer("–û—Ç–º–µ–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=client_menu())

# —Å—Ç–∞—Ä—Ç
@router.message(Command("start"))
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    if is_admin(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_menu())
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!", reply_markup=client_menu())

# –∑–∞–ø–∏—Å—å
SERVICES = [
    "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂ ‚Äî 60 –º–∏–Ω ‚Äî 2 500‚ÇΩ",
    "–°–ø–∏–Ω–∞ + –®–í–ó ‚Äî 40 –º–∏–Ω ‚Äî 2 000‚ÇΩ",
    "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π –º–∞—Å—Å–∞–∂ ‚Äî 60 –º–∏–Ω ‚Äî 2 000‚ÇΩ",
]

@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(message: Message, state: FSMContext):
    await state.clear()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for s in SERVICES:
        kb.add(KeyboardButton(text=s))
    kb.add(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)
    await state.set_state(BookingStates.choosing_service)

@router.message(BookingStates.choosing_service)
async def choose_service(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    service = message.text
    if service not in SERVICES:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∫–Ω–æ–ø–∫–æ–π.")
    await state.update_data(service=service)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31 –º–∞—è 14:00):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(BookingStates.choosing_datetime)

@router.message(BookingStates.choosing_datetime)
async def choose_datetime(message: Message, state: FSMContext):
    text = message.text
    try:
        dt = parse_russian_datetime(text)
    except:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 31 –º–∞—è 14:00")
    if dt < datetime.now():
        return await message.answer("‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.")
    date_str = dt.strftime("%d %B")
    time_str = dt.strftime("%H:%M")
    if await is_slot_taken(date_str, time_str):
        return await message.answer("‚ùå –°–ª–æ—Ç –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
    data = await state.get_data()
    await save_appointment({
        "user_id": message.from_user.id,
        "service": data["service"],
        "date": date_str,
        "time": time_str
    })
    await send_with_main_menu(
        message,
        f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {data['service']}\n"
        f"<b>–î–∞—Ç–∞:</b> {date_str}\n"
        f"<b>–í—Ä–µ–º—è:</b> {time_str}"
    )
    await state.clear()

# –º–æ–∏ –∑–∞–ø–∏—Å–∏
@router.message(F.text == "üóì –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def my_records(message: Message):
    recs = await get_user_appointments(message.from_user.id)
    now = datetime.now()
    out = []
    for r in recs:
        try:
            dt = parse_russian_datetime(f"{r['date']} {r['time']}")
            if r["status"] != "–æ—Ç–º–µ–Ω–µ–Ω–∞" and dt > now:
                out.append(r)
        except:
            pass
    if not out:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
    text = "üóì –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for i, r in enumerate(out,1):
        text += (f"{i}) {r['date']} {r['time']}\n"
                 f"   {r['service']} | {r['status']} | {r['payment_status']}\n\n")
    await message.answer(text)

# –æ—Ç–º–µ–Ω–∞
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cancel_start(message: Message, state: FSMContext):
    recs = await get_user_appointments(message.from_user.id)
    now = datetime.now()
    valid = [r for r in recs if r["status"]!="–æ—Ç–º–µ–Ω–µ–Ω–∞" and parse_russian_datetime(f"{r['date']} {r['time']}")-now>timedelta(hours=24)]
    if not valid:
        return await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await state.set_state(CancelStates.choosing)
    await state.update_data(records=valid)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for r in valid:
        kb.add(KeyboardButton(text=f"{r['date']} {r['time']}"))
    kb.add(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:", reply_markup=kb)

@router.message(CancelStates.choosing)
async def cancel_confirm(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    recs = (await state.get_data())["records"]
    match = next((r for r in recs if f"{r['date']} {r['time']}"==message.text), None)
    if not match:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    await cancel_appointment(message.from_user.id, match["date"], match["time"])
    await message.answer("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=client_menu())
    await state.clear()

# –ø–µ—Ä–µ–Ω–æ—Å
@router.message(F.text == "üîÅ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å")
async def resch_start(message: Message, state: FSMContext):
    recs = await get_user_appointments(message.from_user.id)
    now = datetime.now()
    valid = [r for r in recs if r["status"]!="–æ—Ç–º–µ–Ω–µ–Ω–∞" and parse_russian_datetime(f"{r['date']} {r['time']}")-now>timedelta(hours=24)]
    if not valid:
        return await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.")
    await state.set_state(RescheduleStates.choosing)
    await state.update_data(records=valid)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for r in valid:
        kb.add(KeyboardButton(text=f"{r['date']} {r['time']}"))
    kb.add(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å:", reply_markup=kb)

@router.message(RescheduleStates.choosing)
async def resch_choose_old(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    recs = (await state.get_data())["records"]
    match = next((r for r in recs if f"{r['date']} {r['time']}"==message.text), None)
    if not match:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    await state.update_data(old=match)
    await state.set_state(RescheduleStates.new_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:", reply_markup=ReplyKeyboardRemove())
    # –ø–æ–∫–∞–∑–∞—Ç—å ¬´–ù–∞–∑–∞–¥¬ª
    await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

@router.message(RescheduleStates.new_time)
async def resch_confirm(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    try:
        dt = parse_russian_datetime(message.text)
    except:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    if dt < datetime.now() + timedelta(hours=24):
        return await message.answer("‚ùå –ú–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á.")
    old = (await state.get_data())["old"]
    new_d, new_t = dt.strftime("%d %B"), dt.strftime("%H:%M")
    await update_appointment(message.from_user.id, old["date"], old["time"], new_d, new_t)
    await message.answer(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {new_d} {new_t}", reply_markup=client_menu())
    await state.clear()

# –ø—Ä–∞–π—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
@router.message(F.text == "üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç")
async def price_list(message: Message):
    await message.answer(
        "üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n\n"
        "‚Äî –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π ‚Äî 60 –º–∏–Ω ‚Äî 2 500‚ÇΩ\n"
        "‚Äî –°–ø–∏–Ω–∞+–®–í–ó ‚Äî 40 –º–∏–Ω ‚Äî 2 000‚ÇΩ\n"
        "‚Äî –ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π ‚Äî 60 –º–∏–Ω ‚Äî 2 000‚ÇΩ"
    )

@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    await message.answer(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "+7 939 754 46 24\n"
        "@v_muzhikova\n"
        "–≥. –°–∞–º–∞—Ä–∞, —É–ª. –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è 70/2, 231"
    )
