# handlers/booking.py

from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from utils import parse_russian_datetime, send_with_main_menu
from services.storage import is_slot_taken, save_appointment

router = Router()

class BookingStates(StatesGroup):
    choosing_gender = State()
    choosing_service = State()
    choosing_datetime = State()

# –£—Å–ª—É–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–æ–≤ (–º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏)
FEMALE_SERVICES = [
    "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂ ‚Äî 60 –º–∏–Ω ‚Äî 2 500‚ÇΩ",
    "–ú–∞—Å—Å–∞–∂ —Å–ø–∏–Ω—ã + (–∑–æ–Ω–∞ –®–í–ó) ‚Äî 40 –º–∏–Ω ‚Äî 2 000‚ÇΩ",
    "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π –º–∞—Å—Å–∞–∂ ‚Äî 60 –º–∏–Ω ‚Äî 2 000‚ÇΩ",
]
MALE_SERVICES = [
    "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂ ‚Äî 60 –º–∏–Ω ‚Äî 2 500‚ÇΩ",
    "–ú–∞—Å—Å–∞–∂ —Å–ø–∏–Ω—ã + (–∑–æ–Ω–∞ –®–í–ó) ‚Äî 40 –º–∏–Ω ‚Äî 2 500‚ÇΩ",
]

@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(message: Message, state: FSMContext):
    await state.clear()
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–µ–≤—É—à–∫–∞"), KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)
    await state.set_state(BookingStates.choosing_gender)

@router.message(BookingStates.choosing_gender, F.text.in_(["–î–µ–≤—É—à–∫–∞", "–ú—É–∂—á–∏–Ω–∞"]))
async def choose_gender(message: Message, state: FSMContext):
    gender = message.text
    await state.update_data(gender=gender)

    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ –ø–æ–ª—É
    services = FEMALE_SERVICES if gender == "–î–µ–≤—É—à–∫–∞" else MALE_SERVICES
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=s)] for s in services] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)
    await state.set_state(BookingStates.choosing_service)

@router.message(BookingStates.choosing_gender)
async def choose_gender_invalid(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–î–µ–≤—É—à–∫–∞¬ª –∏–ª–∏ ¬´–ú—É–∂—á–∏–Ω–∞¬ª –∫–Ω–æ–ø–∫–æ–π.")

@router.message(BookingStates.choosing_service, StateFilter(F.text.in_(FEMALE_SERVICES + MALE_SERVICES)))
async def choose_service(message: Message, state: FSMContext):
    await state.update_data(service=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ø—Ä–∏–º–µ—Ä: 31 –º–∞—è 14:00):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BookingStates.choosing_datetime)

@router.message(BookingStates.choosing_service)
async def choose_service_invalid(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∫–Ω–æ–ø–∫–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞.")

@router.message(BookingStates.choosing_datetime)
async def choose_datetime(message: Message, state: FSMContext):
    text = message.text
    try:
        dt = parse_russian_datetime(text)
    except Exception:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 31 –º–∞—è 14:00")

    if dt < datetime.now():
        return await message.answer("‚ùå –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞.")

    date_str = dt.strftime("%d %B")
    time_str = dt.strftime("%H:%M")

    if await is_slot_taken(date_str, time_str):
        return await message.answer("‚ùå –°–ª–æ—Ç –∑–∞–Ω—è—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")

    data = await state.get_data()
    appt_id = await save_appointment({
        "user_id": message.from_user.id,
        "service": data["service"],
        "date": date_str,
        "time": time_str
    })

    payment_info = (
        "üîî –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 500 ‚ÇΩ –Ω–∞ –Ω–æ–º–µ—Ä +7 XXX XXX XX XX.\n"
        "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –∑–∞–ø–∏—Å—å."
    )

    await send_with_main_menu(
        message,
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {data['service']}\n"
        f"<b>–î–∞—Ç–∞:</b> {date_str}\n"
        f"<b>–í—Ä–µ–º—è:</b> {time_str}\n\n"
        f"{payment_info}"
    )
    await state.clear()

@router.message(BookingStates.choosing_datetime)
async def choose_datetime_invalid(message: Message):
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: 31 –º–∞—è 14:00")

# –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π BookingStates
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", StateFilter(BookingStates))
async def booking_go_back(message: Message, state: FSMContext):
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from keyboards.client_kb import client_menu
    await message.answer("–û—Ç–º–µ–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=client_menu())
